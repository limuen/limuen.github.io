(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{577:function(s,t,a){"use strict";a.r(t);var n=a(13),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[s._v("在开发项目的时候，就要注意项目的一些小技巧，下面我就罗列一些经常用到的优化的方法吧。同时老规矩，查缺补漏。")])]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("这篇文章呢，主要是做一个 Vue 性能优化的帖子，做一个参考文档，对以后项目上线做一些集合文档。如果对各位在项目优化时，做一个文档参照。")]),s._v(" "),a("h2",{attrs:{id:"优先使用-vif"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先使用-vif"}},[s._v("#")]),s._v(" 优先使用 vIf")]),s._v(" "),a("p",[a("code",[s._v("vIf")]),s._v("  和 "),a("code",[s._v("vShow")]),s._v("  理论上都是作用于元素的显示隐藏，只是一个是直接对 DOM，一个是通过 CSS 的 "),a("code",[s._v("display")]),s._v("  来操作的，在项目中大部分的时候我都是直接使用 "),a("code",[s._v("vIf")]),s._v("  直接代替使用 "),a("code",[s._v("vShow")]),s._v(" ，只有当 DOM 频繁进行显示和隐藏的时候，但是这种场景非常少见，我只在信息推送优先级中使用过，项目中一直通过 WebSocket  推的消息进行消息的场景遇到过，频繁推送不同类型的通知。")]),s._v(" "),a("h2",{attrs:{id:"vfor-和-vif-不要一起使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vfor-和-vif-不要一起使用"}},[s._v("#")]),s._v(" vFor 和 vIf 不要一起使用")]),s._v(" "),a("p",[a("code",[s._v("vFor")]),s._v("  的优先级其实是比 "),a("code",[s._v("vIF")]),s._v("  高的，所以当两个指令出现来一个 DOM 中，那么 "),a("code",[s._v("vFor")]),s._v("  渲染的当前列表，每一次都需要进行一次 "),a("code",[s._v("vIf")]),s._v("  的判断。而相应的列表也会重新变化，这个看起来是非常不合理的。因此当你需要进行同步指令的时候。尽量使用计算属性，先将 "),a("code",[s._v("vIf")]),s._v("  不需要的值先过滤掉。他看起像是下面这样的。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 计算属性")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("computed")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("filterList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("showData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isShow\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// DOM")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ul"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("li v"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"item in filterList"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"item.id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("li"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ul"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("img",{attrs:{src:"/vifcomputed.jpg",alt:"avatar"}})]),s._v(" "),a("h2",{attrs:{id:"vfor-key-避免使用-index-作为标识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vfor-key-避免使用-index-作为标识"}},[s._v("#")]),s._v(" vFor key 避免使用 index 作为标识")]),s._v(" "),a("p",[s._v("其实大家都知道 "),a("code",[s._v("vFor")]),s._v("  是不推荐使用 "),a("code",[s._v("index")]),s._v("  下标来作为 "),a("code",[s._v("key")]),s._v("  的值，这是一个非常好理解的知识点，可以从图中看到，当 index 作为标识的时候，插入一条数据的时候，列表中它后面的 key 都发生了变化，那么当前的 "),a("code",[s._v("vFor")]),s._v("  都会对 key 变化的 "),a("code",[s._v("Element")]),s._v("  重新渲染，但是其实它们除了插入的 "),a("code",[s._v("Element")]),s._v("  数据都没有发生改变，这就导致了没有必要的开销。所以，尽量不要用 index 作为标识，而去采用数据中的唯一值，如 "),a("code",[s._v("id")]),s._v("  等字段。")]),s._v(" "),a("p",[a("img",{attrs:{src:"/vforindex.png",alt:"avatar-w70"}})]),s._v(" "),a("h2",{attrs:{id:"释放组件资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#释放组件资源"}},[s._v("#")]),s._v(" 释放组件资源")]),s._v(" "),a("p",[s._v("什么是资源? 每创建出一个事物都需要消耗资源，资源不是凭空产生的，是分配出来的。所以说，当组件销毁后，尽量把我们开辟出来的资源块给销毁掉，比如 setInterval , addEventListener 等，如果你不去手动给释放掉，那么它们依旧会占用一部分资源。这就导致了没有必要的资源浪费。多来几次后，可以想象下资源占用率肯定是上升的。")]),s._v(" "),a("p",[s._v("添加的事件")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("created")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("Fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("$on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hook:beforeDestory'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("Fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在created中就把清除定时器的逻辑写上（直接监听钩子），既可以避免书写逻辑太过跳跃（一般created和distroy离得太远了），又可以防止自己忘掉写清除的逻辑。")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("beforeDestroy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Function "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("定时器")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("created")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentInterVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("millisec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("beforeDestroy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("clearInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentInterVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"长列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#长列表"}},[s._v("#")]),s._v(" 长列表")]),s._v(" "),a("p",[s._v("项目当中，会涉及到非常多的长列表场景，区别于普通的分页来说，大部分的前端在做这种 "),a("code",[s._v("无限列表")]),s._v("  的时候，大部分新手前端都是通过一个 "),a("code",[s._v("vFor")]),s._v("  将数据遍历出来，想的多一点的就是做一个分页。滚动到底部的时候就继续请求 "),a("code",[s._v("API")]),s._v(" 。其实这也是未思考妥当的。随着数据的加载，DOM 会越来越多，这样就导致了性能开销的问题产生了，当页面上的 DOM 太多的时候，难免给我的客户端造成一定的压力，所以对于长列表渲染的时候，建议将 DOM 移除掉，类似于图片懒加载的模式，只有出现在视图上的 DOM 才是重要的 DOM。网络上有一些很好的解决方案，如 "),a("code",[s._v("vue-virtual-scroller")]),s._v("  库等等，大家可以理性的选择。")]),s._v(" "),a("h2",{attrs:{id:"图片合理的优化方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图片合理的优化方式"}},[s._v("#")]),s._v(" 图片合理的优化方式")]),s._v(" "),a("p",[s._v("图片应该都不陌生吧，在网页中，往往存在大量的图片资源，这些资源或大或小。当我们页面中 DOM 中存在大量的图片时，难免不会碰到一些加载缓慢的问题，导致图片出现加载失败的问题。网络上大部分都在使用 "),a("code",[s._v("懒加载")]),s._v("  的使用方式，只有当 "),a("code",[s._v("存在图片的DOM")]),s._v("  出现在页面上才会进行图片的加载，无形中起到了分流的作用，下面就说一套实践的方案吧")]),s._v(" "),a("ul",[a("li",[s._v("小图标使用 "),a("code",[s._v("SVG")]),s._v(" 或者字体图标")]),s._v(" "),a("li",[s._v("通过 "),a("code",[s._v("base64")]),s._v(" 和 "),a("code",[s._v("webp")]),s._v(" 的方式加载小型图片")]),s._v(" "),a("li",[s._v("能通过 cdn 加速的大图尽量用 cdn")]),s._v(" "),a("li",[s._v("大部分框架都带有懒加载的图片，不要嫌麻烦，多花点时间使用它")])]),s._v(" "),a("h2",{attrs:{id:"ui-框架使用方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ui-框架使用方式"}},[s._v("#")]),s._v(" UI 框架使用方式")]),s._v(" "),a("p",[s._v("确保在使用 UI 框架如， "),a("code",[s._v("Element")]),s._v(" ， "),a("code",[s._v("And Design")]),s._v("  等 UI 框架的时候，都使用官方给暴露出来的按需加载组件。只有真正用到它的时候时候才会加载当前 UI 框架的组件，而不是一开始就将整个组件库给加载出来，我们都知道，一个 UI 框架其实很大，相对比其他的东西来说。因此，它在方便我们开发者的同时，也无形中产生了多余的开销。但是项目周期开发的时候，不得不依赖它。所以建议尽量的使用按需加载。合理的对项目进行止损，如果你不在意，非常嫌麻烦，那么可以进行全局引入。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" Button "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"首屏优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首屏优化"}},[s._v("#")]),s._v(" 首屏优化")]),s._v(" "),a("p",[s._v("众所周知，第一次打开 Vue 的时候，如果你的项目够大，那么首次加载资源时，会非常的久。由于资源没有加载完毕，界面的 DOM 也不会渲染，会造成白屏的问题。用户此时并不知道是加载的问题，所以会带来一个不好的体验。因此通常会在 public 下写一个加载动画，告诉用户，网页在加载中这个提示。当页面加载成功后，页面渲染出来的这一个体验比白屏等开机要好太多了。因此，推荐大家都设计一个自家公司的 loading 加载方式放入 index.html 中吧。")]),s._v(" "),a("h1",{attrs:{id:"项目过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目过程"}},[s._v("#")]),s._v(" 项目过程")]),s._v(" "),a("h2",{attrs:{id:"最小化-js-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最小化-js-文件"}},[s._v("#")]),s._v(" 最小化 JS 文件")]),s._v(" "),a("p",[s._v("可以通过 webpack 处理打包的 JavaScript 文件，让其更加的精简。在配置中，你可以这么做")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("optimization"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("minimize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"图片资源压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图片资源压缩"}},[s._v("#")]),s._v(" 图片资源压缩")]),s._v(" "),a("p",[s._v("可以通过 "),a("code",[s._v("image-webpack-loader")]),s._v(" 插件对打包的图片进行压缩，看起来会对图片的加载有一些提升。如果担心破坏图片，可以放弃使用它。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("yarn add  image"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("webpack"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("loader\n\nconfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("module\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'images'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'image-webpack-loader'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("loader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'image-webpack-loader'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("bypassOnDebug")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"打包公共代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包公共代码"}},[s._v("#")]),s._v(" 打包公共代码")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("webpack4")]),s._v("  中，可以通过 "),a("code",[s._v("optimization.minimize")]),s._v("  将公共代码进行打包，虽然我个人认为这个东西对 SPA 应用来说，效果其实有限，但有胜于无，文字再小也是肉不是，所以说，在细节的把控上，永远是无止境的。但是在 webpack4 中也是将 CommonsChunkPlugin 改用 SplitChunksPlugin 了。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("webpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("optimize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CommonsChunkPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vendor"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"runtime"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("filename")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[xxxxx].js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"删除沉淀代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除沉淀代码"}},[s._v("#")]),s._v(" 删除沉淀代码")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("Tree-Shaking")]),s._v(" 插件可以将一些无用的沉淀泥沙代码给清理掉。")]),s._v(" "),a("h2",{attrs:{id:"依赖库-cdn-加速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖库-cdn-加速"}},[s._v("#")]),s._v(" 依赖库 CDN 加速")]),s._v(" "),a("p",[s._v("看到有小伙伴使用 CDN 的方式引入一些依赖包，觉得非常的 Nice ，然后我也开始使用了。我将 "),a("code",[s._v("Vue")]),s._v(" "),a("code",[s._v("Axios")]),s._v(" "),a("code",[s._v("Echarts")]),s._v(" 等等都分离了出来，在正式环境下，通过 CDN，确实有了一些明显的提升，所以说大家可以进行尝试。\nCDN LinkDI 地址："),a("a",{attrs:{href:"https://www.bootcdn.cn/",target:"_blank",rel:"noopener noreferrer"}},[s._v("BootCDN"),a("OutboundLink")],1)]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在html引入script标签后。在vue的配置中，进行声明")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("configureWebpack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("externals")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v("'echarts'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'echarts'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 配置使用CDN")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"gzip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gzip"}},[s._v("#")]),s._v(" GZIP")]),s._v(" "),a("p",[s._v("这个东西需要后端进行配置，当然，如果你有操作 "),a("code",[s._v("Nginx")]),s._v(" 的权限的话，那么可以自己开启，反正我认为，这个东西提升还是很大的。之前也写过这篇文章，开启 gzip 的，"),a("a",{attrs:{href:"https://limuen.github.io/blogs/vue/2020/200108.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue cli3.x 开启 gzip，优化速度"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"后话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后话"}},[s._v("#")]),s._v(" 后话")]),s._v(" "),a("p",[s._v("项目优化是非常重要的，一丝一毫的提升都是对用户的负责。本篇文章是对一个优化的小总结，都是一些开发中需要注意的。如果真的想在优化中玩出花来，其实非常难。需要具备很多全面的知识，而不是看一两篇文章就能够说精通的。没有什么技术是随随便便就能掌握的，除非它的价值很低。或者是属于必备项的一个东西。所以说，性能优化还是需要大家在日常项目中养成好的编码习惯，高内聚低耦合。避免无用代码。这些比任何后期的工作都要实在。")])])}),[],!1,null,null,null);t.default=e.exports}}]);